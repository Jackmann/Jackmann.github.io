{"version":3,"sources":["webpack:///./src/Home.js"],"names":["__webpack_require__","r","__webpack_exports__","d","Home","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","searchInput","initialValue","inputRef","useRef","value","setSearchValue","useState","useEffect","current","focus","ref","onChange","target","useSearchInput","values","searchValue","setValues","searchData","setSearchData","fetch","cache","then","results","json","filter","name","includes","useFetchAndSearch","a","createElement","Fragment","map","key"],"mappings":"yFAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,4BAAAE,IAAA,IAAAC,EAAAL,EAAA,GAAAM,EAAAN,EAAAO,EAAAF,GAEe,SAASD,IACtB,MAAMI,EAcR,SAAwBC,GACtB,MAAMC,EAAWC,oBACVC,EAAOC,GAAkBC,mBAASL,GAUzC,OARAM,oBAAU,WACRL,EAASM,QAAQC,UACfP,KAOFQ,IAAKR,EACLE,QACAO,SAPF,UAAwBC,QAAQR,MAAEA,KAChCC,EAAeD,KAvBGS,CAAe,IAC7BC,EAgCR,SAA2BC,GACzB,MAAOD,EAAQE,GAAaV,wBACrBW,EAAYC,GAAiBZ,uBAiBpC,OAfAC,oBAAU,WACRY,MAAM,oCACJC,MAAO,aAERC,KAAKC,GAAWA,EAAQC,QACxBF,KAAK,EAAGC,cACPN,EAAUM,GACVJ,EAAcI,UAIlBf,oBAAU,WACRS,EAAUC,EAAWO,OAAO,EAAGC,UAAWA,EAAKC,SAASX,OACtDA,IAEGD,EAnDQa,CAAkB3B,EAAYI,OAE7C,OACEN,EAAA8B,EAAAC,cAAA/B,EAAA8B,EAAAE,SAAA,uBACiBhC,EAAA8B,EAAAC,cAAA,QAAW7B,GAC1BF,EAAA8B,EAAAC,cAAA,WACA/B,EAAA8B,EAAAC,cAAA,WAHF,gBAKGf,EAAOiB,IAAI,EAAGN,UAAW3B,EAAA8B,EAAAC,cAAA,OAAKG,IAAKP,GAAOA","file":"1.index.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nexport default function Home() {\n  const searchInput = useSearchInput('');\n  const values = useFetchAndSearch(searchInput.value);\n\n  return (\n    <>\n      Focused input: <input {...searchInput} />\n      <br />\n      <br />\n      Fetched data:\n      {values.map(({ name }) => <div key={name}>{name}</div>)}\n    </>\n  );\n};\n\nfunction useSearchInput(initialValue) {\n  const inputRef = useRef();\n  const [value, setSearchValue] = useState(initialValue);\n\n  useEffect(function firstRender() {\n    inputRef.current.focus();\n  }, [inputRef]);\n\n  function handleChange({ target: { value } }) {\n    setSearchValue(value);\n  }\n\n  return {\n    ref: inputRef,\n    value,\n    onChange: handleChange,\n  };\n}\n\nfunction useFetchAndSearch(searchValue) {\n  const [values, setValues] = useState([]);\n  const [searchData, setSearchData] = useState([]);\n\n  useEffect(function fetchData() {\n    fetch('https://pokeapi.co/api/v2/nature', {\n      cache: 'no-cache',\n    })\n    .then(results => results.json())\n    .then(({ results }) => {\n      setValues(results);\n      setSearchData(results);\n    });\n  }, []);\n\n  useEffect(function searchPokemon() {\n    setValues(searchData.filter(({ name }) => name.includes(searchValue)));\n  }, [searchValue]);\n\n  return values;\n}\n"],"sourceRoot":""}